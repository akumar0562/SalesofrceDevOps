name: Validate Production Pull Request

on:
  pull_request:
    branches:
      - main
    paths:
      - 'force-app/**'
jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    # Now we install nodejs in the VM, and specify version 14
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
                  
      - uses: actions/checkout@v3
      - name: 'Read PR Body'
        env:
                # The pull request body is available through the github context object
                # we put the body of the pull request in an env variable (only available to this step)
          PR_BODY: ${{github.event.pull_request.body}}

              # Here we print the content of the environment variable and
              # pipe to a a text file.

              # Then we call the local script parsePR.js, which will create
              # a new file called testsToRun.txt. This file will have the list
              # of tests to run separated by a comma

              # Finally, we add the list of tests to the $GITHUB_ENV variable
              # as this allows us to reference the list in a subsequent step.  If you
              # were using a normal env variable, its value would not be available outside this step.
        run: |
          echo $PR_BODY > ./pr_body.txt
          node ./parsePR.js              
          TESTS=$(cat testsToRun.txt)       
          echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
# Now Install Salesforce CLI
      - name: 'Install Salesforce CLI'
        run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version
  # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
      - name: 'Installing sfdx git delta'
        run: | 
          echo y | sfdx plugins:install sfdx-git-delta
          sfdx plugins    
      - name: 'Populate auth file with SFDX_URL secret of integration org'
        shell: bash
        run: |
          echo ${{ secrets.SFDX_AUTH_URL}} > ./SFDX_AUTH_URL.txt
# Authenticate to org using the URL stored in the text file
      - name: 'Authenticate to Integration Org'
        run: sfdx auth:sfdxurl:store -f ./SFDX_AUTH_URL.txt -s -a integration
      - name: 'Create delta packages for new, modified or deleted metadata'
        run: | 
          mkdir changed-sources
          sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/
      - name: Generate package.xml
        shell: bash
        run: |
          sf project generate manifest --source-dir changed-sources/force-app --output-dir manifest --type pre       
      - name: Validate with test classes
        if: ${{ env.APEX_TESTS != 'NoTestRun' }}
        shell: bash
        run: |
          deployFlags=(
              --manifest manifest/package.xml 
              --wait 30
              --test-level RunSpecifiedTests
              --tests ${{env.APEX_TESTS}}
              --verbose
            )
          if [ "true" = "true" ]; then
            deployFlags+=( --dry-run )
          fi
          sf project deploy start "${deployFlags[@]}"
      - name: Validate without test classes
        if: ${{ env.APEX_TESTS == 'NoTestRun' }}
        shell: bash
        run: |
          deployFlags=(
              --manifest manifest/package.xml
              --wait 30
              --test-level NoTestRun
              --verbose
            )
          if [ "true" = "true" ]; then
            deployFlags+=( --dry-run )
          fi
          sf project deploy start "${deployFlags[@]}"
          
      
